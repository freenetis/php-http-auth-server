<?php

/* 
 * This file is a part of PHP-HTTP-Auth-server library, released under terms 
 * of GPL-3.0 licence. Copyright (c) 2014, UnArt Slavičín, o.s. All rights 
 * reserved.
 */

namespace phphttpauthserver;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-11-22 at 19:59:34.
 */
class HttpAuthResponseTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var HttpAuthResponse
     */
    protected $object;

    protected function setUp() {
        $this->object = new HttpAuthResponse;
    }

    /**
     * @covers HttpAuthResponse::isPassed
     */
    public function testIsPassed() {
        // default always TRUE
        $this->assertTrue($this->object->isPassed());
        // add header does not change passed
        $this->object->addHeader('aa', 'aaa');
        $this->assertTrue($this->object->isPassed());
        // add error set passed to false
        $this->object->addError('aaa');
        $this->assertFalse($this->object->isPassed());
    }

    /**
     * @covers HttpAuthResponse::setPassed
     */
    public function testSetPassed() {
        $this->object->setPassed(FALSE);
        $this->assertFalse($this->object->isPassed());
        
        $this->object->setPassed(TRUE);
        $this->assertTrue($this->object->isPassed());
    }

    /**
     * @covers HttpAuthResponse::getUsername
     */
    public function testGetUsername()
    {
        // default null
        $this->assertNull($this->object->getUsername());
    }

    /**
     * @covers HttpAuthResponse::setUsername
     */
    public function testSetUsername()
    {
        $this->object->setUsername('aaaa');
        $this->assertEquals('aaaa', $this->object->getUsername());
        
        $this->object->setUsername('aaaa11');
        $this->assertEquals('aaaa11', $this->object->getUsername());
    }

    /**
     * @covers HttpAuthResponse::addError
     */
    public function testAddError() {
        $this->object->addError('aaaa');
        $errors = $this->object->getErrors();
        $this->assertEquals(1, count($errors));
        $this->assertEquals('aaaa', $errors[0]);
        
        $this->object->addError('aaaaA');
        $this->object->addError('aaaa');
        $errors3 = $this->object->getErrors();
        $this->assertEquals(3, count($errors3));
        $this->assertEquals('aaaa', $errors3[0]);
        $this->assertEquals('aaaaA', $errors3[1]);
        $this->assertEquals('aaaa', $errors3[2]);
        
        // can change passed to FALSE (no change is actually made)
        $this->object->setPassed(FALSE);
        // cannot change passed to TRUE
        try {
            $this->object->setPassed(TRUE);
            $this->fail('except InvalidArgumentException');
        } catch (\InvalidArgumentException $ex) { // ok
        } catch (\Exception $ex) {
            $this->fail('invalid exception thrown');
        }
    }

    /**
     * @covers HttpAuthResponse::addHeader
     */
    public function testAddHeader() {
        $this->object->addHeader('aaa', 'aaa');
        $this->object->addHeader('aa', 'aaa');
        $this->object->addHeader('aaa', 'AAAA');
        $headers = $this->object->getHeaders();
        $this->object->getHeaders(2, count($headers));
        $this->assertEquals('aaa', $headers['aa']);
        $this->assertEquals('AAAA', $headers['aaa']);
    }

    /**
     * @covers HttpAuthResponse::getErrors
     */
    public function testGetErrors() {
        // default null if passed TRUE
        $this->assertNull($this->object->getErrors());
        // passed false empty array
        $this->object->setPassed(FALSE);
        $errors = $this->object->getErrors();
        $this->assertTrue(is_array($errors));
        $this->assertEquals(0, count($errors));
    }

    /**
     * @covers HttpAuthResponse::getHeaders
     */
    public function testGetHeaders() {
        // always empty array
        $headers = $this->object->getHeaders();
        $this->assertTrue(is_array($headers));
        $this->assertEquals(0, count($headers));
    }

}
